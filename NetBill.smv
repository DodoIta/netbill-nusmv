------------------------
-- Progetto MVSS      -- 
-- Davide Cortellucci --
-- Matricola #260321  --
------------------------

--------------------------------------
-- Model Checking:		    --
-- The NetBill Transaction Protocol --
--------------------------------------

------------------------------------------------------
-- Specifiche del protocollo:                       --
-- http://www.sti.uniurb.it/aldini/mvss/2016s2a.pdf --
------------------------------------------------------

--------------------
-- Lista di stati --
--------------------

-- pr:		 "Price Request"
-- pq:		 "Price Quote"
-- gr:	    	 "Goods Request"
-- eg:	    	 "Encrypted Goods"
-- epo:		 "Electronic Payment Order"
-- eepo:  	 "Endorsed EPO"
-- sr_nm:	 "Signed Result" (da NetBill a mercante)
-- sr_mc:	 "Signed Result" (da mercante a cliente)
-- ok:		 Transazione andata a buon fine
-- error:	 Transazione non completata

------------
-- Moduli --
------------

-- Cliente

MODULE cliente(m)

VAR

-- Checksum sui beni da mercante a cliente
cc : boolean;

-- Stati del cliente
state : {pr, gr, epo, ok, error};

ASSIGN

init (cc)	:= {TRUE, FALSE};
init (state)    := pr;

next (state) :=
case
	state = pr & m = pq 	: gr;
	m = eg & cc = FALSE	: error;
	m = eg & cc = TRUE	: epo;
	m = sr_mc		: ok;
	m = error		: error;
	TRUE 			: state;
esac;

-- Mercante

MODULE mercante(c, n)

VAR

-- Accordo sul prezzo dei beni
bid : boolean;

-- Stati del mercante
state : {idle, pq, eg, eepo, sr_mc, error};

ASSIGN

init (bid)   := {TRUE, FALSE};
init (state) := idle;

next (state) :=
case
	state = pr & bid = FALSE	: error;
	c = pr & bid = TRUE		: pq;
	c = gr				: eg;
	c = epo				: eepo;
	n = error			: error;
	n = sr_nm			: sr_mc;
	TRUE 				: state;
esac;

-- NetBill

MODULE netbill(m)

VAR

-- Decisione di NetBill sulla transazione
nb_decision : boolean;

-- Identifica univocamente la transazione, evita replay attacks
epoid : boolean;

-- Stati di NetBill
state	 : {idle, sr_nm, error};

ASSIGN

init (nb_decision)	:= {TRUE, FALSE};
init (epoid) 		:= {TRUE, FALSE};
init (state)	  	:= idle;

next (state) :=
case
	m = eepo & 
		(epoid = FALSE | nb_decision = FALSE) 	: error;
	m = eepo & 
		(epoid = TRUE & nb_decision = TRUE)	: sr_nm;
	TRUE 						: state;
esac;

MODULE main

VAR

c : consumer (m);
m : merchant (c, n);
n : netbill (m);

--------------------
-- Model Checking --
--------------------

-- Per qualsiasi cammino, alla fine la transazione termina
CTLSPEC AG (EF (cliente = ok | cliente = error));

-- Se la transazione è avvenuta con successo, non può essere segnalato errore e viceversa
CTLSPEC EF (cliente = ok <-> !(cliente = error));

-- Se Netbill o il mercante segnalano un qualsiasi errore, la transazione non andrà mai a buon fine
CTLSPEC AF ((netbill = error | mercante = error) -> cliente = error);

-- Se cliente e mercante non si accordano sul prezzo, la transazione non va a buon fine
CTLSPEC EF ((bid = FALSE | nb_decision = FALSE | cc = FALSE) -> cliente = error);

-- Se NetBill segnala un errore qualsiasi, il cliente non riceve la chiave e la transazione non va a buon fine
CTLSPEC AF ((cliente = eepo & nb_decision = FALSE) -> !(cliente = ok));
