------------------------
-- Progetto MVSS      -- 
-- Davide Cortellucci --
-- Matricola #260321  --
------------------------

--------------------------------------
-- Model Checking:		    --
-- The NetBill Transaction Protocol --
--------------------------------------

------------------------------------------------------
-- Specifiche del protocollo:                       --
-- http://www.sti.uniurb.it/aldini/mvss/2016s2a.pdf --
------------------------------------------------------

------------
-- Moduli --
------------

-- Cliente

MODULE cliente(m)

VAR

-- Checksum sui beni da mercante a cliente
cc : boolean;

--------------------------------
-- Lista di stati del cliente --
--------------------------------

-- pr:		 "Price Request" (stato iniziale)
-- gr:	    	 "Goods Request"
-- epo:		 "Electronic Payment Order"
-- ok:		 Transazione andata a buon fine (cliente riceve la chiave per decrittare i beni)
-- error:	 Esito della transazione negativo

state : {pr, gr, epo, ok, error};

ASSIGN

init (cc) := {TRUE, FALSE};

init (state) := pr;
next (state) :=
case
	m.state = error			: error;
	state = pr & m.state = pq 	: gr;
	m.state = eg & cc = FALSE	: error;
	m.state = eg & cc = TRUE	: epo;
	m.state = sr_mc			: ok;
	TRUE 				: state;
esac;

-- Mercante

MODULE mercante(c, n)

VAR

-- Accordo sul prezzo dei beni
bid : boolean;

---------------------------------
-- Lista di stati del mercante --
---------------------------------

-- idle:	 Stato iniziale (in attesa)
-- pq:		 "Price Quote"
-- eg:	    	 "Encrypted Goods"
-- eepo:  	 "Endorsed EPO"
-- sr_mc:	 "Signed Result" (da mercante a cliente)
-- error:	 Errore nella transazione

state : {idle, pq, eg, eepo, sr_mc, error};

ASSIGN

init (bid) := {TRUE, FALSE};

init (state) := idle;
next (state) :=
case
	n.state = error			: error;	
	c.state = pr & bid = FALSE	: error;
	c.state = pr & bid = TRUE	: pq;
	c.state = gr			: eg;
	c.state = epo			: eepo;
	n.state = sr_nm			: sr_mc;
	TRUE 				: state;
esac;

-- NetBill

MODULE netbill(m)

VAR

-- Decisione di NetBill sulla transazione
nb_decision : boolean;

-------------------------------
-- Lista di stati di NetBill --
-------------------------------

-- idle:	 Stato iniziale (in attesa)
-- sr_nm:	 "Signed Result" (da NetBill a mercante)
-- error:	 Errore nella transazione

state	 : {idle, sr_nm, error};

ASSIGN

init (nb_decision) := {TRUE, FALSE};

init (state) := idle;
next (state) :=
case
	m.state = eepo & nb_decision = FALSE 	: error;
	m.state = eepo & nb_decision = TRUE	: sr_nm;
	TRUE 					: state;
esac;

MODULE main

VAR

c : cliente(m);
m : mercante(c, n);
n : netbill(m);

--------------------
-- Model Checking --
--------------------

-- Per qualsiasi cammino, alla fine la transazione termina
CTLSPEC AG (EF (c.state = ok | c.state = error));

-- Se la transazione è avvenuta con successo, non verrà mai segnalato errore e viceversa
CTLSPEC AG !((c.state = ok & m.state = error) & (c.state = error & m.state = sr_mc));

-- Se cliente e mercante non si accordano sul prezzo o i beni non sono conformi, la transazione non va a buon fine
CTLSPEC EF ((m.bid = FALSE | c.cc = FALSE) -> c.state = error);

-- Se NetBill segnala un errore qualsiasi, il cliente non riceve la chiave e la transazione non va a buon fine
CTLSPEC AF ((n.nb_decision = FALSE) -> !(c.state = ok));

-- Se NetBill riscontra un errore nel pagamento, il cliente non riceve la chiave per decrittare i beni (ok)
CTLSPEC AG ((c.state = epo & n.state = error) -> AX !(c.state = ok));
