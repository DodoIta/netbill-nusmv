------------------------
-- Progetto MVSS      -- 
-- Davide Cortellucci --
-- Matricola #260321  --
------------------------

--------------------------------------
-- Model Checking:		    --
-- The NetBill Transaction Protocol --
--------------------------------------

------------------------------------------------------
-- Specifiche del protocollo:                       --
-- http://www.sti.uniurb.it/aldini/mvss/2016s2a.pdf --
------------------------------------------------------

--------------------
-- Lista di stati --
--------------------

-- pr:		 "Price Request"
-- pq:		 "Price Quote"
-- gr:	    	 "Goods Request"
-- eg:	    	 "Encrypted Goods"
-- epo:		 "Electronic Payment Order"
-- eepo:  	 "Endorsed EPO"
-- sr_nm:	 "Signed Result" (da NetBill a mercante)
-- sr_mc:	 "Signed Result" (da mercante a cliente)
-- ok:		 Transazione andata a buon fine
-- error:	 Transazione non completata

------------
-- Moduli --
------------

-- Cliente

MODULE cliente(m)

VAR

-- Checksum sui beni da mercante a cliente
cc : boolean;

-- Stati del cliente
state : {pr, gr, epo, ok, error};

ASSIGN

init (cc)	:= {TRUE, FALSE};
--next (cc)	:= cc;

init (state)    := pr;
next (state) :=
case
	m.state = error			: error;
	state = pr & m.state = pq 	: gr;
	m.state = eg & cc = FALSE	: error;
	m.state = eg & cc = TRUE	: epo;
	m.state = sr_mc			: ok;
	TRUE 				: state;
esac;

-- Mercante

MODULE mercante(c, n)

VAR

-- Accordo sul prezzo dei beni
bid : boolean;

-- Stati del mercante
state : {idle, pq, eg, eepo, sr_mc, error};

ASSIGN

init (bid)	:= {TRUE, FALSE};
--next (bid)	:= bid;

init (state) := idle;
next (state) :=
case
	n.state = error			: error;	
	state = pr & bid = FALSE	: error;
	c.state = pr & bid = TRUE	: pq;
	c.state = gr			: eg;
	c.state = epo			: eepo;
	n.state = sr_nm			: sr_mc;
	TRUE 				: state;
esac;

-- NetBill

MODULE netbill(m)

VAR

-- Decisione di NetBill sulla transazione
nb_decision : boolean;

-- Identifica univocamente la transazione, evita replay attacks
epoid : boolean;

-- Stati di NetBill
state	 : {idle, sr_nm, error};

ASSIGN

init (nb_decision)	:= {TRUE, FALSE};
--next (nb_decision)	:= nb_decision;

init (epoid) 		:= {TRUE, FALSE};
--next (epoid)		:= epoid;

init (state)	  	:= idle;
next (state) :=
case
	m.state = eepo & 
		(epoid = FALSE | nb_decision = FALSE) 	: error;
	m.state = eepo & 
		(epoid = TRUE & nb_decision = TRUE)	: sr_nm;
	TRUE 						: state;
esac;

MODULE main

VAR

c : cliente(m);
m : mercante(c, n);
n : netbill(m);

--------------------
-- Model Checking --
--------------------

-- Per qualsiasi cammino, alla fine la transazione termina
CTLSPEC AG (EF (c.state = ok | c.state = error));

-- Se la transazione è avvenuta con successo, non può essere segnalato errore e viceversa
CTLSPEC EF (c.state = ok <-> !(c.state = error));


-- Se cliente e mercante non si accordano sul prezzo o i beni non sono conformi, la transazione non va a buon fine
CTLSPEC EF ((m.bid = FALSE | c.cc = FALSE) -> c.state = error);

-- Se NetBill segnala un errore qualsiasi, il cliente non riceve la chiave e la transazione non va a buon fine
CTLSPEC AF ((c.state = eepo & n.nb_decision = FALSE) -> !(c.state = ok));
